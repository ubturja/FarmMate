{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add wallet address to headers\napi.interceptors.request.use(config => {\n  const walletAddress = localStorage.getItem('walletAddress');\n  if (walletAddress) {\n    config.headers['x-wallet-address'] = walletAddress;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('walletAddress');\n    window.location.reload();\n  }\n  return Promise.reject(error);\n});\n\n// User API\nexport const userAPI = {\n  create: userData => api.post('/api/users', userData),\n  get: walletAddress => api.get(`/api/users/${walletAddress}`)\n};\n\n// Farm API\nexport const farmAPI = {\n  create: farmData => api.post('/api/farms', farmData),\n  getAll: () => api.get('/api/farms')\n};\n\n// Marketplace API\nexport const marketplaceAPI = {\n  getBatches: (params = {}) => api.get('/api/marketplace/batches', {\n    params\n  }),\n  getBatch: batchId => api.get(`/api/marketplace/batches/${batchId}`),\n  createBatch: batchData => api.post('/api/marketplace/batches', batchData),\n  listBatch: (batchId, priceWei) => api.post(`/api/marketplace/batches/${batchId}/list`, {\n    priceWei\n  }),\n  fundEscrow: (batchId, value) => api.post(`/api/marketplace/batches/${batchId}/fund-escrow`, {\n    value\n  }),\n  markDelivered: batchId => api.post(`/api/marketplace/batches/${batchId}/deliver`),\n  releaseFunds: batchId => api.post(`/api/marketplace/batches/${batchId}/release`),\n  refund: batchId => api.post(`/api/marketplace/batches/${batchId}/refund`)\n};\n\n// Provenance API\nexport const provenanceAPI = {\n  getBatch: batchId => api.get(`/api/provenance/batches/${batchId}`),\n  addNote: (batchId, noteData) => api.post(`/api/provenance/batches/${batchId}/notes`, noteData),\n  verify: batchId => api.get(`/api/provenance/batches/${batchId}/verify`),\n  getQR: batchId => api.get(`/api/provenance/batches/${batchId}/qr`),\n  search: searchData => api.post('/api/provenance/search', searchData)\n};\n\n// AI API\nexport const aiAPI = {\n  detectDisease: formData => api.post('/api/ai/detect-disease', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  }),\n  scoreQuality: formData => api.post('/api/ai/score-quality', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  }),\n  forecastYield: data => api.post('/api/ai/forecast-yield', data),\n  forecastPrice: data => api.post('/api/ai/forecast-price', data),\n  analyzeBatch: formData => api.post('/api/ai/analyze-batch', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  }),\n  getStatus: () => api.get('/api/ai/status')\n};\n\n// Sustainable Incentives API\nexport const incentivesAPI = {\n  getFarmerProfile: walletAddress => api.get(`/api/incentives/farmer/${walletAddress}`),\n  getIncentives: (params = {}) => api.get('/api/incentives', {\n    params\n  }),\n  getIncentive: incentiveId => api.get(`/api/incentives/${incentiveId}`),\n  claimIncentive: incentiveId => api.post(`/api/incentives/${incentiveId}/claim`),\n  getLeaderboard: (params = {}) => api.get('/api/incentives/leaderboard', {\n    params\n  }),\n  updateFarmerData: (walletAddress, data) => api.post(`/api/incentives/farmer/${walletAddress}/update`, data)\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","walletAddress","localStorage","getItem","error","Promise","reject","response","_error$response","status","removeItem","window","location","reload","userAPI","userData","post","get","farmAPI","farmData","getAll","marketplaceAPI","getBatches","params","getBatch","batchId","createBatch","batchData","listBatch","priceWei","fundEscrow","value","markDelivered","releaseFunds","refund","provenanceAPI","addNote","noteData","verify","getQR","search","searchData","aiAPI","detectDisease","formData","scoreQuality","forecastYield","data","forecastPrice","analyzeBatch","getStatus","incentivesAPI","getFarmerProfile","getIncentives","getIncentive","incentiveId","claimIncentive","getLeaderboard","updateFarmerData"],"sources":["/home/turja/Projects/FarmMate (2) /farmmate-prototype/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add wallet address to headers\napi.interceptors.request.use(\n  (config) => {\n    const walletAddress = localStorage.getItem('walletAddress');\n    if (walletAddress) {\n      config.headers['x-wallet-address'] = walletAddress;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for error handling\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('walletAddress');\n      window.location.reload();\n    }\n    return Promise.reject(error);\n  }\n);\n\n// User API\nexport const userAPI = {\n  create: (userData) => api.post('/api/users', userData),\n  get: (walletAddress) => api.get(`/api/users/${walletAddress}`),\n};\n\n// Farm API\nexport const farmAPI = {\n  create: (farmData) => api.post('/api/farms', farmData),\n  getAll: () => api.get('/api/farms'),\n};\n\n// Marketplace API\nexport const marketplaceAPI = {\n  getBatches: (params = {}) => api.get('/api/marketplace/batches', { params }),\n  getBatch: (batchId) => api.get(`/api/marketplace/batches/${batchId}`),\n  createBatch: (batchData) => api.post('/api/marketplace/batches', batchData),\n  listBatch: (batchId, priceWei) => api.post(`/api/marketplace/batches/${batchId}/list`, { priceWei }),\n  fundEscrow: (batchId, value) => api.post(`/api/marketplace/batches/${batchId}/fund-escrow`, { value }),\n  markDelivered: (batchId) => api.post(`/api/marketplace/batches/${batchId}/deliver`),\n  releaseFunds: (batchId) => api.post(`/api/marketplace/batches/${batchId}/release`),\n  refund: (batchId) => api.post(`/api/marketplace/batches/${batchId}/refund`),\n};\n\n// Provenance API\nexport const provenanceAPI = {\n  getBatch: (batchId) => api.get(`/api/provenance/batches/${batchId}`),\n  addNote: (batchId, noteData) => api.post(`/api/provenance/batches/${batchId}/notes`, noteData),\n  verify: (batchId) => api.get(`/api/provenance/batches/${batchId}/verify`),\n  getQR: (batchId) => api.get(`/api/provenance/batches/${batchId}/qr`),\n  search: (searchData) => api.post('/api/provenance/search', searchData),\n};\n\n// AI API\nexport const aiAPI = {\n  detectDisease: (formData) => api.post('/api/ai/detect-disease', formData, {\n    headers: { 'Content-Type': 'multipart/form-data' },\n  }),\n  scoreQuality: (formData) => api.post('/api/ai/score-quality', formData, {\n    headers: { 'Content-Type': 'multipart/form-data' },\n  }),\n  forecastYield: (data) => api.post('/api/ai/forecast-yield', data),\n  forecastPrice: (data) => api.post('/api/ai/forecast-price', data),\n  analyzeBatch: (formData) => api.post('/api/ai/analyze-batch', formData, {\n    headers: { 'Content-Type': 'multipart/form-data' },\n  }),\n  getStatus: () => api.get('/api/ai/status'),\n};\n\n// Sustainable Incentives API\nexport const incentivesAPI = {\n  getFarmerProfile: (walletAddress) => api.get(`/api/incentives/farmer/${walletAddress}`),\n  getIncentives: (params = {}) => api.get('/api/incentives', { params }),\n  getIncentive: (incentiveId) => api.get(`/api/incentives/${incentiveId}`),\n  claimIncentive: (incentiveId) => api.post(`/api/incentives/${incentiveId}/claim`),\n  getLeaderboard: (params = {}) => api.get('/api/incentives/leaderboard', { params }),\n  updateFarmerData: (walletAddress, data) => api.post(`/api/incentives/farmer/${walletAddress}/update`, data),\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}