{"ast":null,"code":"import { ethers } from 'ethers';\nimport contractABI from '../contract-abi.json';\nconst CONTRACT_ADDRESS = process.env.REACT_APP_CONTRACT_ADDRESS || '0x2c7d77410317c1b342d8aa07Ea28e81b0e3779cD';\nconst RPC_URL = process.env.REACT_APP_RPC_URL || 'http://localhost:8545';\nclass BlockchainService {\n  constructor() {\n    this.provider = null;\n    this.signer = null;\n    this.contract = null;\n    this.isConnected = false;\n  }\n  async connect() {\n    try {\n      if (typeof window.ethereum !== 'undefined') {\n        // Request account access\n        await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        this.provider = new ethers.BrowserProvider(window.ethereum);\n        this.signer = await this.provider.getSigner();\n        this.contract = new ethers.Contract(CONTRACT_ADDRESS, contractABI, this.signer);\n        this.isConnected = true;\n\n        // Store wallet address\n        const address = await this.signer.getAddress();\n        localStorage.setItem('walletAddress', address);\n        return {\n          success: true,\n          address\n        };\n      } else {\n        throw new Error('MetaMask not detected');\n      }\n    } catch (error) {\n      console.error('Wallet connection error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n  async getAccount() {\n    if (!this.signer) {\n      throw new Error('Wallet not connected');\n    }\n    return await this.signer.getAddress();\n  }\n  async getBalance() {\n    if (!this.signer) {\n      throw new Error('Wallet not connected');\n    }\n    const address = await this.signer.getAddress();\n    const balance = await this.provider.getBalance(address);\n    return ethers.formatEther(balance);\n  }\n  async getNetwork() {\n    if (!this.provider) {\n      throw new Error('Provider not initialized');\n    }\n    return await this.provider.getNetwork();\n  }\n\n  // Contract interaction methods\n  async createBatch(metadataCID, priceWei) {\n    if (!this.contract) {\n      throw new Error('Contract not initialized');\n    }\n    const tx = await this.contract.createBatch(metadataCID, priceWei);\n    await tx.wait();\n    return tx.hash;\n  }\n  async listBatch(batchId, priceWei) {\n    if (!this.contract) {\n      throw new Error('Contract not initialized');\n    }\n    const tx = await this.contract.listBatch(batchId, priceWei);\n    await tx.wait();\n    return tx.hash;\n  }\n  async updateQuality(batchId, qualityScore, dataVerified) {\n    if (!this.contract) {\n      throw new Error('Contract not initialized');\n    }\n    const tx = await this.contract.updateQuality(batchId, qualityScore, dataVerified);\n    await tx.wait();\n    return tx.hash;\n  }\n  async updateMetadata(batchId, metadataCID) {\n    if (!this.contract) {\n      throw new Error('Contract not initialized');\n    }\n    const tx = await this.contract.updateMetadata(batchId, metadataCID);\n    await tx.wait();\n    return tx.hash;\n  }\n  async addProvenance(batchId, noteCID) {\n    if (!this.contract) {\n      throw new Error('Contract not initialized');\n    }\n    const tx = await this.contract.addProvenance(batchId, noteCID);\n    await tx.wait();\n    return tx.hash;\n  }\n  async fundEscrow(batchId, value) {\n    if (!this.contract) {\n      throw new Error('Contract not initialized');\n    }\n    const tx = await this.contract.fundEscrow(batchId, {\n      value\n    });\n    await tx.wait();\n    return tx.hash;\n  }\n  async markDelivered(batchId) {\n    if (!this.contract) {\n      throw new Error('Contract not initialized');\n    }\n    const tx = await this.contract.markDelivered(batchId);\n    await tx.wait();\n    return tx.hash;\n  }\n  async releaseToFarmer(batchId) {\n    if (!this.contract) {\n      throw new Error('Contract not initialized');\n    }\n    const tx = await this.contract.releaseToFarmer(batchId);\n    await tx.wait();\n    return tx.hash;\n  }\n  async refundBuyer(batchId) {\n    if (!this.contract) {\n      throw new Error('Contract not initialized');\n    }\n    const tx = await this.contract.refundBuyer(batchId);\n    await tx.wait();\n    return tx.hash;\n  }\n\n  // View methods\n  async getBatch(batchId) {\n    if (!this.contract) {\n      throw new Error('Contract not initialized');\n    }\n    return await this.contract.getBatch(batchId);\n  }\n  async getProvenanceCIDs(batchId) {\n    if (!this.contract) {\n      throw new Error('Contract not initialized');\n    }\n    return await this.contract.getProvenanceCIDs(batchId);\n  }\n  async getIncentivePoints(address) {\n    if (!this.contract) {\n      throw new Error('Contract not initialized');\n    }\n    return await this.contract.incentivePoints(address);\n  }\n\n  // Event listeners\n  async getBatchEvents(batchId, fromBlock = 0) {\n    if (!this.contract) {\n      throw new Error('Contract not initialized');\n    }\n    const filter = this.contract.filters.BatchCreated(batchId);\n    return await this.contract.queryFilter(filter, fromBlock);\n  }\n  async getAllBatchEvents(fromBlock = 0) {\n    if (!this.contract) {\n      throw new Error('Contract not initialized');\n    }\n    const events = [];\n    const eventTypes = ['BatchCreated', 'BatchListed', 'QualityUpdated', 'MetadataUpdated', 'ProvenanceAdded', 'EscrowFunded', 'Delivered', 'Released', 'Refunded'];\n    for (const eventType of eventTypes) {\n      const filter = this.contract.filters[eventType]();\n      const eventList = await this.contract.queryFilter(filter, fromBlock);\n      events.push(...eventList);\n    }\n    return events.sort((a, b) => a.blockNumber - b.blockNumber);\n  }\n\n  // Utility methods\n  formatEther(wei) {\n    return ethers.formatEther(wei);\n  }\n  parseEther(ether) {\n    return ethers.parseEther(ether);\n  }\n  formatUnits(value, unit) {\n    return ethers.formatUnits(value, unit);\n  }\n  parseUnits(value, unit) {\n    return ethers.parseUnits(value, unit);\n  }\n\n  // Disconnect wallet\n  disconnect() {\n    this.provider = null;\n    this.signer = null;\n    this.contract = null;\n    this.isConnected = false;\n    localStorage.removeItem('walletAddress');\n  }\n}\nexport default new BlockchainService();","map":{"version":3,"names":["ethers","contractABI","CONTRACT_ADDRESS","process","env","REACT_APP_CONTRACT_ADDRESS","RPC_URL","REACT_APP_RPC_URL","BlockchainService","constructor","provider","signer","contract","isConnected","connect","window","ethereum","request","method","BrowserProvider","getSigner","Contract","address","getAddress","localStorage","setItem","success","Error","error","console","message","getAccount","getBalance","balance","formatEther","getNetwork","createBatch","metadataCID","priceWei","tx","wait","hash","listBatch","batchId","updateQuality","qualityScore","dataVerified","updateMetadata","addProvenance","noteCID","fundEscrow","value","markDelivered","releaseToFarmer","refundBuyer","getBatch","getProvenanceCIDs","getIncentivePoints","incentivePoints","getBatchEvents","fromBlock","filter","filters","BatchCreated","queryFilter","getAllBatchEvents","events","eventTypes","eventType","eventList","push","sort","a","b","blockNumber","wei","parseEther","ether","formatUnits","unit","parseUnits","disconnect","removeItem"],"sources":["/home/turja/Projects/FarmMate (2) /farmmate-prototype/frontend/src/services/blockchain.js"],"sourcesContent":["import { ethers } from 'ethers';\nimport contractABI from '../contract-abi.json';\n\nconst CONTRACT_ADDRESS = process.env.REACT_APP_CONTRACT_ADDRESS || '0x2c7d77410317c1b342d8aa07Ea28e81b0e3779cD';\nconst RPC_URL = process.env.REACT_APP_RPC_URL || 'http://localhost:8545';\n\nclass BlockchainService {\n  constructor() {\n    this.provider = null;\n    this.signer = null;\n    this.contract = null;\n    this.isConnected = false;\n  }\n\n  async connect() {\n    try {\n      if (typeof window.ethereum !== 'undefined') {\n        // Request account access\n        await window.ethereum.request({ method: 'eth_requestAccounts' });\n        \n        this.provider = new ethers.BrowserProvider(window.ethereum);\n        this.signer = await this.provider.getSigner();\n        this.contract = new ethers.Contract(CONTRACT_ADDRESS, contractABI, this.signer);\n        this.isConnected = true;\n\n        // Store wallet address\n        const address = await this.signer.getAddress();\n        localStorage.setItem('walletAddress', address);\n\n        return { success: true, address };\n      } else {\n        throw new Error('MetaMask not detected');\n      }\n    } catch (error) {\n      console.error('Wallet connection error:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  async getAccount() {\n    if (!this.signer) {\n      throw new Error('Wallet not connected');\n    }\n    return await this.signer.getAddress();\n  }\n\n  async getBalance() {\n    if (!this.signer) {\n      throw new Error('Wallet not connected');\n    }\n    const address = await this.signer.getAddress();\n    const balance = await this.provider.getBalance(address);\n    return ethers.formatEther(balance);\n  }\n\n  async getNetwork() {\n    if (!this.provider) {\n      throw new Error('Provider not initialized');\n    }\n    return await this.provider.getNetwork();\n  }\n\n  // Contract interaction methods\n  async createBatch(metadataCID, priceWei) {\n    if (!this.contract) {\n      throw new Error('Contract not initialized');\n    }\n    const tx = await this.contract.createBatch(metadataCID, priceWei);\n    await tx.wait();\n    return tx.hash;\n  }\n\n  async listBatch(batchId, priceWei) {\n    if (!this.contract) {\n      throw new Error('Contract not initialized');\n    }\n    const tx = await this.contract.listBatch(batchId, priceWei);\n    await tx.wait();\n    return tx.hash;\n  }\n\n  async updateQuality(batchId, qualityScore, dataVerified) {\n    if (!this.contract) {\n      throw new Error('Contract not initialized');\n    }\n    const tx = await this.contract.updateQuality(batchId, qualityScore, dataVerified);\n    await tx.wait();\n    return tx.hash;\n  }\n\n  async updateMetadata(batchId, metadataCID) {\n    if (!this.contract) {\n      throw new Error('Contract not initialized');\n    }\n    const tx = await this.contract.updateMetadata(batchId, metadataCID);\n    await tx.wait();\n    return tx.hash;\n  }\n\n  async addProvenance(batchId, noteCID) {\n    if (!this.contract) {\n      throw new Error('Contract not initialized');\n    }\n    const tx = await this.contract.addProvenance(batchId, noteCID);\n    await tx.wait();\n    return tx.hash;\n  }\n\n  async fundEscrow(batchId, value) {\n    if (!this.contract) {\n      throw new Error('Contract not initialized');\n    }\n    const tx = await this.contract.fundEscrow(batchId, { value });\n    await tx.wait();\n    return tx.hash;\n  }\n\n  async markDelivered(batchId) {\n    if (!this.contract) {\n      throw new Error('Contract not initialized');\n    }\n    const tx = await this.contract.markDelivered(batchId);\n    await tx.wait();\n    return tx.hash;\n  }\n\n  async releaseToFarmer(batchId) {\n    if (!this.contract) {\n      throw new Error('Contract not initialized');\n    }\n    const tx = await this.contract.releaseToFarmer(batchId);\n    await tx.wait();\n    return tx.hash;\n  }\n\n  async refundBuyer(batchId) {\n    if (!this.contract) {\n      throw new Error('Contract not initialized');\n    }\n    const tx = await this.contract.refundBuyer(batchId);\n    await tx.wait();\n    return tx.hash;\n  }\n\n  // View methods\n  async getBatch(batchId) {\n    if (!this.contract) {\n      throw new Error('Contract not initialized');\n    }\n    return await this.contract.getBatch(batchId);\n  }\n\n  async getProvenanceCIDs(batchId) {\n    if (!this.contract) {\n      throw new Error('Contract not initialized');\n    }\n    return await this.contract.getProvenanceCIDs(batchId);\n  }\n\n  async getIncentivePoints(address) {\n    if (!this.contract) {\n      throw new Error('Contract not initialized');\n    }\n    return await this.contract.incentivePoints(address);\n  }\n\n  // Event listeners\n  async getBatchEvents(batchId, fromBlock = 0) {\n    if (!this.contract) {\n      throw new Error('Contract not initialized');\n    }\n    const filter = this.contract.filters.BatchCreated(batchId);\n    return await this.contract.queryFilter(filter, fromBlock);\n  }\n\n  async getAllBatchEvents(fromBlock = 0) {\n    if (!this.contract) {\n      throw new Error('Contract not initialized');\n    }\n    const events = [];\n    const eventTypes = [\n      'BatchCreated',\n      'BatchListed', \n      'QualityUpdated',\n      'MetadataUpdated',\n      'ProvenanceAdded',\n      'EscrowFunded',\n      'Delivered',\n      'Released',\n      'Refunded'\n    ];\n\n    for (const eventType of eventTypes) {\n      const filter = this.contract.filters[eventType]();\n      const eventList = await this.contract.queryFilter(filter, fromBlock);\n      events.push(...eventList);\n    }\n\n    return events.sort((a, b) => a.blockNumber - b.blockNumber);\n  }\n\n  // Utility methods\n  formatEther(wei) {\n    return ethers.formatEther(wei);\n  }\n\n  parseEther(ether) {\n    return ethers.parseEther(ether);\n  }\n\n  formatUnits(value, unit) {\n    return ethers.formatUnits(value, unit);\n  }\n\n  parseUnits(value, unit) {\n    return ethers.parseUnits(value, unit);\n  }\n\n  // Disconnect wallet\n  disconnect() {\n    this.provider = null;\n    this.signer = null;\n    this.contract = null;\n    this.isConnected = false;\n    localStorage.removeItem('walletAddress');\n  }\n}\n\nexport default new BlockchainService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}